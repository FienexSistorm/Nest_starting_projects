# ------------------------------- ESLINT ISSUE ------------------------------- #
 when generating a new nest project, it will often show an error when skipping spaces, to prevent this issue ::
	*% in the .eslintrc.js file add this imoprt in the top :   const prettierConfig = require('./.prettierrc.js')
	*% after that, in the "rules" array, add this section 
						"prettier/prettier": [
					      "error",
					      prettierConfig // Magic here
					    ],
# ----------------------------------- ***** ---------------------------------- #

# --------------------------- Generating a resource -------------------------- #
Nest CLI helps up reduce the developpement process by allowing us to generate the whole resource instead of creating 
the controller, service, models, dtos, module manually.
To do so , Use the CLI Commande :   nest generate resource [name] 
# ----------------------------------- ***** ---------------------------------- #

# ------------------------- Express Code Autocomplete ------------------------ #
To make use of expres langauge support and autocomplete when writing nest code, We need to install a package @types/exporess
		 npm install --save @types/express 
# ----------------------------------- ***** ---------------------------------- #

# ---------------------------- Circular Dependency --------------------------- #
It is caused by an injection of a module's Class
# ----------------------------------- ***** ---------------------------------- #

# -------------------- Class-Validator Approach for PIPES -------------------- #
The use of the class-validator library for implimenting Validation Pipes is only available for TypeScript based project.
And not vanilla JavaScript. If you are using vanilla JavaScript in your Nest Porject, You should follow the 
SCHEMA BASED VALIDATION Approach.
To use The class-Validator Approach Do not forget to install the appropriate packages
		~ $ npm i --save class-validator class-transformer	 
# ----------------------------------- ***** ---------------------------------- #

# ---------------------- Database Integration ~~ TypeORM --------------------- #
To integrate the database with a nest project , we need to install TypeORM and the client Api library (MS SQL, MySQL, Mongo ,...)
example pf MySQL : 		~ $ npm i --save @nestjs/typeorm typeorm mysql2
For classes that have been decalred as @Entity, It is forbidden to set a intial value for their attributes
# ----------------------------------- ***** ---------------------------------- #

# ------------------------------- /************\ ----------------------------- #
# ------------------------ [Mapping Utility Functions] ----------------------- #
# ------------------------------- \************/ ----------------------------- #

# -------------- THE EXAMPLE USED IN THE INCOMING NOTES ABOUT IS ------------- #
export class CreateCatDto {
  name: string;
  age: number;
  breed: string;
}
# ----------------------------------- ***** ---------------------------------- #

# ---------------------- About the PartialType() metyhod --------------------- #
The  PartialType() method is used to construct a new  class (type) from another BY setting the fields of the last as OPTIONAL in the newly
constructed one 
Example: 		export class UpdateUserDto extends PartialType(CreateUserDto){}  
# ----------------------------------- ***** ---------------------------------- #

# ------------------------ About The PickType() method ----------------------- #
The PickType() method is used to construct a new class (type) by choosing (picking) a set of properties from the input class (type)
Example: 		export class UpdateCatAgeDto extends PickType(CreateCatDto, ['age'] as const) {} 
# ----------------------------------- ***** ---------------------------------- #

# ------------------------ About The OmitType() method ----------------------- #
The OMitType() method is used to constrcut a new class (type) by pucking all the properties from  the input type class 
and then removing a set of keys.
Example:	export class UpdateCatDto extends OmitType(CreateCatDto, ['name'] as const) {}
	=>> Here we want for the UpdateCatDto to  include the properties from the CreateCatDto except for the name property
# ----------------------------------- ***** ---------------------------------- #

# -------------------- About the IntersectionType() method ------------------- #
The IntersectionType() method is used to combine two input class types into one class type.
Example:
Supposing we have another class beside the CreateCatDto described as follows:


export class AdditionalCatInfo {
  color: string;
}

And we want to combine the two classes into one class (UpdateClassDto)
export class UpdateCatDto extends IntersectionType(
	CreateCatDto,
	AdditionnalCatInfo
)
# ----------------------------------- ***** ---------------------------------- #

# ------------------------ Composing Mapping Functions ----------------------- #
We can always compose the previous Mapping Functions to construct a new class.
For instance, if we want the UpdateCatDto to be composed from the CreateCatDto and The AdditionnalCatInfo 
but without having the breed property of the CreateCatDto
Example: 
	export class UpdateCatDto extends IntersectionType(
		OmitType(CreateCatDto, ["breed"] as const),
		AdditionalCatInfo
	){}

# ----------------------------------- ***** ---------------------------------- #

# ----------------------- Parsing and validating arrays ---------------------- #
An Array is a generic type (handled the same as Typescript Interfaces ) meaning that the ValidationPipe can't validate it properly,
To solve the issue, we can use the ParseArray pipe on the incoming property
>> Example 1: 
@Get()
@Post()
createBulk(
  @Body(new ParseArrayPipe({ items: CreateUserDto }))
  createUserDtos: CreateUserDto[],
) {
  return 'This action adds new users';
}

>> Example 2:
findByIds(
  @Query('ids', new ParseArrayPipe({ items: Number, separator: ',' }))
  ids: number[],
) {
  return 'This action returns users by ids';
}

Another way to force the validation of incoming arrays is to wrap them in a property of a dedicated class type.
>> Example 3:
// NEED THIS EXAMPLE (Custom example)
# ----------------------------------- ***** ---------------------------------- #


# ------------------------------ /************\ ------------------------------ #
# ----------------------- [FILE UPLOADING WITH MULTER] ----------------------- #
# ------------------------------ \************/ ------------------------------ #

# ----------------------------------- Intro ---------------------------------- #
For File-uploading , nest offer a built-in module based on the 'multer' middleware package for exporess.
Multer handles data posted  in the multipart/form-data format.
For typing(auto-complete) , we need to install the mutlter typing pachage  ~  $ npm i -D @types/multer
// NOTE - This package is not compatible with Fastify
# ----------------------------------- ***** ---------------------------------- #


# -------------------------------- Basic usage ------------------------------- #


 @Post('upload')
    @UseInterceptors(FileInterceptor('file'))
    uploadFile(@UploadedFile() file: Express.Multer.File) {
        console.log(file);
    }

-> FileInterceptor  decorator is exported from the @nestjs/platform-express package, it takes two arguments:
1- fileName: the name of the field of the posted data
2- options: optional object of type MulterOptions. 
// NOTE - The FileInterceptor is not compatible with third party cloud providers (like Firebase)
