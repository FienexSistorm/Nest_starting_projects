

# ---------------------------- Installation setup ---------------------------- #
>> Passport:
        $ npm install --save @nestjs/passport passport passport-local
        $ npm install --save-dev @types/passport-local
>>JWT:
        $ npm install --save @nestjs/jwt passport-jwt
        $ npm install --save-dev @types/passport-jwt
# ----------------------------------- ***** ---------------------------------- #

# ------------------------ ** About Authentication ** ------------------------ #
Passport is the most known node library for Authentication and we can easily integrate it with Nest using the @nestjs/passport module. 
Passport is capable of :
        - Authenticate user by their credentials.
        - Manage authenticated state.
        - Attache user information to the Request object for further use in the route handlers.
Passport has a large ecosystem of strategies that impliment a various set of authentication mechanisms.

The Authentication process of our application is like this:
        - The user will authenticate with a username and password.
        - The server will issue a JWT token that can be sent as a bearer token in an authorization header on subsequent requests to prove authentication.
        - We will set some protected routes that won't be accessible unless the request made contains a valid JWT token.

To implement the user/password authentication, we need to install passport strategy passport-local
# ----------------------------------- ***** ---------------------------------- #

# ------------------ ** Implementing passwport strategies ** ----------------- #
The elegance of the Passport framework is that it abstracts the authentication process into a few basic steps that you customize based on the strategy you're implementing.
It's like a framework because you configure it by supplying customization parameters (as plain JSON objects) and custom code in the form of callback functions, which
Passport calls at the appropriate time.

With @nestjs/passport, you configure a Passport strategy by extending the PassportStrategy class. You pass the strategy options by calling the super() method in your
subclass, optionally passing in an options object. You provide the verify callback by implementing a validate() method in your subclass.

>> Example: Auth (Module+Service) && Users (Module+Service)
# ----------------------------------- ***** ---------------------------------- #

# --------------------- ** Implementing Passport Local ** -------------------- #
To implement the Passport-local strategy, we'll create a strategy class that will extend PassportStrategy class:
The class will implement the validate() which represents the verification method for the Passport-local strategy.
After creating our local.strategy file, we need to configure the auth module to use it.
To do so is very easy, we simply add the [PassportModule] to the imports list of the module and the [LocalStrategy] to list of the providers.
>> Example: local.strategy.ts && auth.module.ts
# ----------------------------------- ***** ---------------------------------- #

# ---------------------- ** Built-in Passport Guards ** ---------------------- #
In case the user/client is not logged in (not-authenticated), we need to 
        - deny the user from accessing restricted routes (The use of Guards).
        - initiate an authentication step when an unauthenticated user attempts to login => set up a POST:auth/login route to handle the login of a user.
So we need a way to invoke the passport-local strategy in the login route handler to check if the user/client is a valid one

>> SOLUTION: @nestjs/passport provides us with a special built-in guard. It will invoke the Passport strategy (verify the credentials, creating the user property ...).
and we will use the return of the guard to prevent access to restricted routes which is the basic usage of any normal guard
# ----------------------------------- ***** ---------------------------------- #

# ----------------------------- ** Login Route ** ---------------------------- #
>>Example :
                @UseGuards(AuthGuard('local'))
                @Post('auth/login')
                async login(@Request() req) {
                        return req.user;
                }
=> like the example shows, we used the @UseGuards() decorator to use our 'AuthGuard' Guard supplied by the @nestjs/passport module, offering it the 'local' value
which is the 

// NOTE - it is considered to be a better practice if we set a class that will extend the AuthGard("local") and pass it through our UseGuards() decorator:
                @Injectable()
                export class LocalGuard extends AuthGuard("local"){

                }
And we can use it as follows:
                @UseGuards(LocalGuard)
                @Post('auth/login')
                async login(@Request() req) {
                        return req.user;
                }
# ----------------------------------- ***** ---------------------------------- #


# -------------------------- ** JWT Functionality ** ------------------------- #
The @nestjs/jwt package is a utility package that helps with JWT manipulation. 
The passport-jwt package is the Passport package that implements the JWT strategy
@types/passport-jwt provides the TypeScript type definitions.
We will generate a JWT token and pass it to the route. We'll do this in our auth.service.

- Let's start by importing and injecting a Service JwtService from '@nestjs/jwt'.
- we'll continue by creating a metho login() that will recieve the user's informations and generates the JWT-token:

>> Example:     
                async login(user: any) {
                        const payload = { usernmae: user.username, sub: user.userId };
                        return {
                                access_token: this.jwtServ.sign(payload)
                        }
                }
=>  sign() metho genrates a jwt-token from to supplied payload object. we choose the userId to be a subset from that payload
// NOTE - We need to register the JwtModule and configure it in order of the jwtService to work. we'll do that in the AuthModule
        imports: [ ...
                JwtModule.register({
                         secret: jwtConstants.secret,           // setting a secret to be used in the process of generating the jwt-token and 'decoding it'
                         signOptions: { expiresIn: '60s' },
                }),
                ...]

# ----------------------------------- ***** ---------------------------------- #


# ---------------------- ** Implimenting Passport JWT ** --------------------- #
Now we need to protect our routes by requiring a valid jwt_token to access them.
Passport can help us here too. It provides the passport-jwt strategy for securing RESTful endpoints with JSON Web Tokens.
- Let's start by creating a file called jwt.strategy.ts in the auth folder.
>> Example:: jwt.strategy.ts

// NOTE -
  -> jwtFromRequest :supplies the method by which the JWT will be extracted from the Request
  -> fromAuthHeaderAsBearerToken: use the standard approach of supplying a bearer token in the Authorization header of our API requests.
  -> igonreExpiration: false => Indicate that the token's expiration should be verified.
  -> secretOrKey: used to pass in the secret used in the process of generating the token.

- After that, we simply need to add our JwtStrategy in the providers list of the AuthModule to be registered.           
- Finally, we need to create our JwtAuthGuard as we did for the LocalAuthGuard by specifying the jwt as strategy of th AuthGuard
                export class JwtAuthGuard extends AuthGuard('jwt') {}


# ----------------------------------- ***** ---------------------------------- #

# --------- ** Implimening protexted route and Jwt Strategy Guards ** -------- #
We'll create a route 'profile' that will return the user object set in the request and we also need to protect the route using our JwtStrategyGuard we created earlier:
                @UseGuards(JwtAuthGuard)
                @Get('profile')
                getProfile(@Request() req) {
                        return req.user;
                }
# ----------------------------------- ***** ---------------------------------- #

# -------------------------- ** Extending Guards ** -------------------------- #
Sometimes, we might need to extend the provided AuthGuard to impliment somec custom logic for errorHandling or event the authentication logic.
We can wan always override methods (canActivate | handleRequest) withing the sub-class:
>> Example : jwt-auth.guard.ts
# ----------------------------------- ***** ---------------------------------- #

# ------------------- ** Enable Authentication Globally ** ------------------- #
Incase the majority of our routes should be protected, it would be more convinient to protect al the routes by setting the security globally on our application 
and than we simply flag the routes that should be public.
1- We will regiter the JwtGuard to be global - in the AuthModule -
        providers: [
                ...
            {
                provide: APP_GUARD,
                useClass: JwtAuthGuard,
            }
        ..],
 ==> this is sufficiant for Nest to bind the JwtAuthGuard to every endpoint.

 2- Now, we must provide a mechanism for declaring routes as public => We'll create a custom decorator using the SetMetadata decorator factory function.
>> Example : Public.decorator.ts
                import { SetMetadata } from '@nestjs/common';

                export const IS_PUBLIC_KEY = 'isPublic';
                export const Public = () => SetMetadata(IS_PUBLIC_KEY, true);
// NOTE - It can also be named SkipAuth

3- Now that we have a custom @Public() decorator, we can use it to decorate any method, as follows
                @Public()
                @Get()
                findAll() {
                return [];
                }
4- Lastly, we need the JwtAuthGuard to return true when the "isPublic" metadata is found. 
 => For this, we'll use the Reflector class to override the canActivate() method of the JwtAuthGuard class
                canActivate(context: ExecutionContext) {
                        const isPublic = this.reflector.getAllAndOverride<boolean>(IS_PUBLIC_KEY, [
                        context.getHandler(),
                        context.getClass(),
                     ]);
                     if (isPublic) {
                        return true;
                     }
                     return super.canActivate(context);
                }