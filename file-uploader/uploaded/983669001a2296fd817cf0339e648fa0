# ------------------------------- ESLINT ISSUE ------------------------------- #
 when generating a new nest project, it will often show an error when skipping spaces, to prevent this issue ::
	*% in the .eslintrc.js file add this imoprt in the top :   const prettierConfig = require('./.prettierrc.js')
	*% after that, in the "rules" array, add this section 
						"prettier/prettier": [
					      "error",
					      prettierConfig // Magic here
					    ],
# ----------------------------------- ***** ---------------------------------- #

# --------------------------- Generating a resource -------------------------- #
Nest CLI helps up reduce the developpement process by allowing us to generate the whole resource instead of creating 
the controller, service, models, dtos, module manually.
To do so , Use the CLI Commande :   nest generate resource [name] 
# ----------------------------------- ***** ---------------------------------- #

# ------------------------- Express Code Autocomplete ------------------------ #
To make use of expres langauge support and autocomplete when writing nest code, We need to install a package @types/exporess
		 npm install --save @types/express 
# ----------------------------------- ***** ---------------------------------- #

# ---------------------------- Circular Dependency --------------------------- #
It is caused by an injection of a module's Class
# ----------------------------------- ***** ---------------------------------- #

# -------------------- Class-Validator Approach for PIPES -------------------- #
The use of the class-validator library for implimenting Validation Pipes is only available for TypeScript based project.
And not vanilla JavaScript. If you are using vanilla JavaScript in your Nest Porject, You should follow the 
SCHEMA BASED VALIDATION Approach.
To use The class-Validator Approach Do not forget to install the appropriate packages
		~ $ npm i --save class-validator class-transformer	 
# ----------------------------------- ***** ---------------------------------- #

# ---------------------- Database Integration ~~ TypeORM --------------------- #
To integrate the database with a nest project , we need to install TypeORM and the client Api library (MS SQL, MySQL, Mongo ,...)
example pf MySQL : 		~ $ npm i --save @nestjs/typeorm typeorm mysql2
For classes that have been decalred as @Entity, It is forbidden to set a intial value for their attributes
# ----------------------------------- ***** ---------------------------------- #

# ------------------------------- /************\ ----------------------------- #
# ------------------------ [Mapping Utility Functions] ----------------------- #
# ------------------------------- \************/ ----------------------------- #

# -------------- THE EXAMPLE USED IN THE INCOMING NOTES ABOUT IS ------------- #
export class CreateCatDto {
  name: string;
  age: number;
  breed: string;
}
# ----------------------------------- ***** ---------------------------------- #

# ---------------------- About the PartialType() metyhod --------------------- #
The  PartialType() method is used to construct a new  class (type) from another BY setting the fields of the last as OPTIONAL in the newly
constructed one 
Example: 		export class UpdateUserDto extends PartialType(CreateUserDto){}  
# ----------------------------------- ***** ---------------------------------- #

# ------------------------ About The PickType() method ----------------------- #
The PickType() method is used to construct a new class (type) by choosing (picking) a set of properties from the input class (type)
Example: 		export class UpdateCatAgeDto extends PickType(CreateCatDto, ['age'] as const) {} 
# ----------------------------------- ***** ---------------------------------- #

# ------------------------ About The OmitType() method ----------------------- #
The OMitType() method is used to constrcut a new class (type) by pucking all the properties from  the input type class 
and then removing a set of keys.
Example:	export class UpdateCatDto extends OmitType(CreateCatDto, ['name'] as const) {}
	=>> Here we want for the UpdateCatDto to  include the properties from the CreateCatDto except for the name property
# ----------------------------------- ***** ---------------------------------- #

# -------------------- About the IntersectionType() method ------------------- #
The IntersectionType() method is used to combine two input class types into one class type.
Example:
Supposing we have another class beside the CreateCatDto described as follows:


export class AdditionalCatInfo {
  color: string;
}

And we want to combine the two classes into one class (UpdateClassDto)
export class UpdateCatDto extends IntersectionType(
	CreateCatDto,
	AdditionnalCatInfo
)
# ----------------------------------- ***** ---------------------------------- #

# ------------------------ Composing Mapping Functions ----------------------- #
We can always compose the previous Mapping Functions to construct a new class.
For instance, if we want the UpdateCatDto to be composed from the CreateCatDto and The AdditionnalCatInfo 
but without having the breed property of the CreateCatDto
Example: 
	export class UpdateCatDto extends IntersectionType(
		OmitType(CreateCatDto, ["breed"] as const),
		AdditionalCatInfo
	){}

# ----------------------------------- ***** ---------------------------------- #

# ----------------------- Parsing and validating arrays ---------------------- #
An Array is a generic type (handled the same as Typescript Interfaces ) meaning that the ValidationPipe can't validate it properly,
To solve the issue, we can use the ParseArray pipe on the incoming property
>> Example 1: 
@Get()
@Post()
createBulk(
  @Body(new ParseArrayPipe({ items: CreateUserDto }))
  createUserDtos: CreateUserDto[],
) {
  return 'This action adds new users';
}

>> Example 2:
findByIds(
  @Query('ids', new ParseArrayPipe({ items: Number, separator: ',' }))
  ids: number[],
) {
  return 'This action returns users by ids';
}

Another way to force the validation of incoming arrays is to wrap them in a property of a dedicated class type.
>> Example 3:
// NEED THIS EXAMPLE (Custom example)
# ----------------------------------- ***** ---------------------------------- #


# ------------------------------ /************\ ------------------------------ #
# ----------------------- [FILE UPLOADING WITH MULTER] ----------------------- #
# ------------------------------ \************/ ------------------------------ #

# ----------------------------------- Intro ---------------------------------- #
For File-uploading , nest offer a built-in module based on the 'multer' middleware package for exporess.
Multer handles data posted  in the multipart/form-data format.
For typing(auto-complete) , we need to install the mutlter typing pachage  ~  $ npm i -D @types/multer
// NOTE - This package is not compatible with Fastify
# ----------------------------------- ***** ---------------------------------- #

# -------------------------------- Basic usage ------------------------------- #
 @Post('upload')
    @UseInterceptors(FileInterceptor('file'))
    uploadFile(@UploadedFile() file: Express.Multer.File) {
        console.log(file);
    }

-> FileInterceptor  decorator is exported from the @nestjs/platform-express package, it takes two arguments:
1- fileName: the name of the field of the posted data
2- options: optional object of type MulterOptions. 
// NOTE - The FileInterceptor is not compatible with third party cloud providers (like Firebase)
# ----------------------------------- ***** ---------------------------------- #

# ------------------------------ File Validation ----------------------------- #
In most cases, we'll be in need of validating the incoming file like their size or format ...
To do that, we can configure some validators that we can apply on our handler.
>> Example : FileSizeVAlidationPipe :: it will return if the file.size < 1000; (the size of the file is less than 1 Kb)
After creating our Validation pipe, We will call for a built-in pipe provided by Nest to standardize the use of caustom validations on files
That pipe is ParseFilePipe and it is used as the example below:

@Post('file')
uploadFileAndPassValidation(
  @UseInterceptors(FileInterceptor('file'))
  @UploadedFile(
    new ParseFilePipe({ 
      validators: [
        // ... Set of file validator instances here
        new MaxFileSizeValidator({ maxSize: 10000 }),     // 1000 = 1Kb
        new FileTypeValidator({ fileType: "jpeg" })    // Forcing the file type to be a JPEG
      ]
    })
  )
  file: Express.Multer.File,
) {
  return {file};
}
# ----------------------------------- ***** ---------------------------------- #

# -------------- Uploading An array of files passed in one field ------------- #
In case we want to upload an array filesidentified by the same field name, we can keep the same skeleton of the previous extraction of one file
but using the plural version as follows:
  - FileInterceptor()  ->> FilesInterceptor()
  - @UploadedFile()  ->> @UploadedFiles()
  - files: Express.Multer.File  ->> Array<Express.Multer.File>
# ----------------------------------- ***** ---------------------------------- #


# ----------- Uploading multiple files each passed in its own field ---------- #
To upload multiple files (each with its different name key), we'll be using the FileFieldsInterception() decorator to identify each file from each field.
This method accepts an array of objects defining {name: string , maxCount: number } as the name of the field and the limit of files to be accepted from that field
Also we will use the plural version @UploadedFiles()
>> Example:

@Post('upload')
@UseInterceptors(FileFieldsInterceptor([
  { name: 'first-file', maxCount: 1 },
  { name: 'second-file', maxCount: 1 },
]))
uploadFile(@UploadedFiles() files: { firstFile?: Express.Multer.File[], secondFile?: Express.Multer.File[] }) {
  return {files}
}
# ----------------------------------- ***** ---------------------------------- #




# ------------------------------ /************\ ------------------------------ #
# ------------------------------ [Interceptors] ------------------------------ #
# ------------------------------ \************/ ------------------------------ #

# ------------------------------- Introduction ------------------------------- #


# ------------------------------- Basic Example ------------------------------ #
 Let's first create our interceptor that will  just log two messages; the first is before the invoque of the handler method, 
 the second will log the date after the invoque of the method [...].
 We can generate an interceptor using the nest commande :     ~ $ nest generate interceptor logging

Interceptors can be controller-scoped, method-scoped, or global-scoped (liek pipes)
To use our intercptor, we call the method @UseInterceptor(MY_INTERCEPTOR_NAME) (from @nestjs/common)
>> Example : 
      @UseInterceptors(LoggingInterceptor)
      export class CatsController {}

      => Each route in the CatsController will use the LoggingInterceptor to log the two messages

>> Example: In case we want to attach the interceptor at the global level (the appliaction level), we make call to the useGlobalInterceptors;
      const app = await NestFactory.create(AppModule);
      app.useGlobalInterceptors(new LoggingInterceptor());      

      => there is a downside of this configuration, since the attachement is made outside the application context, we cannot inject any dependency.
      We have another way of configuring our intercepor and from inside the application context to we can be able to inject out dependecies (same as Global //TODO: verify[Pipes])

      @Module({
        providers: [
          {
            provide: APP_INTERCEPTOR,
            useClass: LoggingInterceptor,
          },
        ]
      })

      export calss AppModule{...}
      // NOTE - regardless of where this configuration is made, the interceptor is GLOBAL.
# ----------------------------------- ***** ---------------------------------- #



# ------------------------------ /************\ ------------------------------ #
# ----------------------------- [Streaming Files] ---------------------------- #
# ------------------------------ \************/ ------------------------------ #

# ----------------------------------- Intro ---------------------------------- #
StreamableFile is a class that holds on to the stream to be returned, So to return a file we just need to return an instance of 
this class and the framework will handlde the piping. It can be imported from  '@nestjs/common'
# ----------------------------------- ***** ---------------------------------- #

# ------------------------------- Basic Example ------------------------------ #
>> Example
        @Get()
        getFile(): StreamableFile {
          const file = createReadStream(join(process.cwd(), 'package.json'));
          return new StreamableFile(file);
        }


// NOTE - process.cwd() is used to get the current working directory of the node.js process

=> The default content type is application/octet-stream, In case we want to changes it, we'll impliment the user of @Header()

# ----------------- Customize the Content-type using @Header ----------------- #
>> Example:
        @Get("another_file")
            @Header("content-type", "application.json")
            @Header("Content-Disposition", "attachement;filename='package.json'")
        getFile(): StreamableFile {
            const file = createReadStream(join(process.cwd(), 'package.json'));
            return new StreamableFile(file);"
          }
# ----------------------------------- ***** ---------------------------------- #




# ------------------------------ /************\ ------------------------------ #
# --------------------------------- [Guards] --------------------------------- #
# ------------------------------ \************/ ------------------------------ #

# ----------------------------------- Intro ---------------------------------- #
Guards are classes annotated as @Injectable() and they implement CanActive interface.
They determine whether a given request will be handled by the route handler or not, depending on certain conditions(permissions, ...)
present at run-time, this is refered to as 'Authorization'.
In NodeJs, Authorization and authentication were handled by Middleware, but they don't knwo which handler will 
be executed after calling the next().
On the other hand, Guards give access to ExecutionContext instance which helps us determine what's going to be executed next.
// NOTE - Guards are executed after all middleware, but BEFORE any pipe or interceptor.
# ----------------------------------- ***** ---------------------------------- #

# ---------------------------- Authorization Guard --------------------------- #
To generate a guard, use the nest commande: ~  $ nest generate guard [guard_name].
Every guard should implement a canActive() method that will contain the logic behind allowing or preventing the process of the current request by returning a boolean,
it can also return a promise or an obsevable of a boolean.

--> ExecutionContext .. We can use the instance of this class to get informations of the called method and also informations of the request itself
 To bind a guard, use the decorator @UseGuards. 
 >> Example
        @UseGuards(AuthGuard)
        @Get("users")
        listUsers(){...}

// NOTE - @UseGuards accepts a guard's class type or its instance like @UseGuards(new AuthGuard)  
// NOTE - Guards can also be method-scoped, controller-scoped, or Global-scoped 
# ----------------------------------- ***** ---------------------------------- #

# ------------------------------- Global Guards ------------------------------ #
As we mentionned earliers, guards can be global-scoped, meaning we can set a guard for the entire application instead of each controller or each handler.
To set up a global Guard, we'll simply use the useGlobalGuards() method of the app instance (main.ts file)
>> Example: 
        const app = await NestFactory.create(AppModule);
        app.useGlobalGuards(new RolesGuard());

This configuration have a side effect when it come to dependency injection, since it is happenning outside the application context, we can't inject any class in our guard's class.
As in all the Injectable classes, we have another alternative way of configuring a global guard without the lost of the ablitity to use dependecy injection, By setting 
the global guard from inside any module using the following construction:

>> Example:
      @Module({
        providers: [
          {
            provide: APP_GUARD,
            useClass: RolesGuard,
          },
        ],
})
export class AppModule {}
// NOTE - This approach will regiter our guard as global regardless of which module was used to provide the guard (in our example it was the AppModule)
# ----------------------------------- ***** ---------------------------------- #


# ------------------------- Setting Roles per Handler ------------------------ #
We would like to set for each controller handler a list of allowed roles that can access it.
This is where custom metadata comes into play, Nest provides the ability to attach custom metadata to route handler through out @SetMetadata() decorator (imported from @nestjs/common packageo). 
We will use the @SetMetadata() decorator to pass in the route informations that the 'smart' guard needs to make its decision about the request.

>> Example:
@Post()
        @SetMetadata('roles', ['admin'])
        async create(@Body() createCatDto: CreateCatDto) {
          this.catsService.create(createCatDto);
        }
--> 'roles' is the key and the ['admin'] is our value

// SECTION -  While using @SetMetadata() is a good way to pass metadata, Creating our custom decorator to define roles for our handlers is considered a better practice.
  - First, let's create our RoleDecorator , we can generate one using the commande:     ~ $  nest generate decorator role
          import { SetMetadata } from '@nestjs/common';
          export const Roles = (...roles: string[]) => SetMetadata('roles', roles);
  - After that, we only need to use our decorator to specify the roles for our route-handler
          @Post()
          @Roles('admin')
          async create(@Body() createCatDto: CreateCatDto) {
            this.catsService.create(createCatDto);
          }
             *****        *****        *****
Back to our RolesGuard, we need to compare the roles assigned to the current user to the actual roles required by the current route being processed.
To access the route's roles (custom metadata), we'll use the helper class Reflector (exposed from the @nestjs/core package) injected in the RolesGuard's constructor

>>Example
        constructor(private reflector: Reflector){}
        const roles = this.reflector.get<string[]>('roles', context.getHandler());  
# ----------------------------------- ***** ---------------------------------- #

